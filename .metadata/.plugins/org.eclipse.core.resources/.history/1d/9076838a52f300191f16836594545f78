/*
 * 							Collection							|		
 * 								 								|
 * 			List				Set				Queue			|	Map	
 * 	     (ArrayList)		  (HashSet)		(PriorityQueue)		| (HashMap)					
 * 		 (LinkedList)			  |					|			|	  |
 * 							  SortedSet			  Deque			| SortedMap
 * 							  (TreeSet)		   (LinkedList)		| (TreeMap)
 * 											   (ArrayDeque)		|
 */

/*
 * 			Interfaces							Implementation
 * 		Multiple Data Structures				Specific Data Structure
 * 		Functional Characteristics				Performance Characteristics
 * 		Prefer as a variable type				Concrete and Instantiable
 * 		Often has a popular implementation
 */

/*
 * 							Deciding which Collection to pick
 *																					  Map	 							
 * 									ELEMENTS ARE KEYED?								   |			
 * 				   Set						|		\_______________YES                |No
 * 					|No						|No                      Order is Important|
 * 					Order is Important?		|										   |Yes	 
 * 					|Yes		^------Elements are Unique?                            |
 * 				 SortedSet								\							SortedMap	
 * 														 \No
 * 											No			  \
 * 							LIFO  <----------------------FIFO
 * 						No	/  \ Yes                 Yes / \ Yes
 * 						   /	\_________Deque_________/   \
 * 						List							   Queue		
 */

/*
 *  all collections extend Collection interface which inturn extend Iterable interface
 *  An iterable defines something which can be iterated over
 *  
 */

package onlineCoaching.course2.collectionsIntro;

public class CollectionOfCollections {
	
}









