Two Interfaces which encapsulates the data returned from the database
	Statement
		Used for executing a static SQL Statement
		Methods:
			ResultSet executeQuery(String SQL)
				used for executing a select statement and it returns a ResultSet object where the ResultSet object maintains the result generated by the SQL select select statement
			int executeUpdate(String SQL)
				is used to INESRT, UPDATE and DELETE statements, and also SQL DDL(Data Definition Language) statements.This method returns an integer which identifies the number of rows returned by the statement
			boolean execute(String SQL)
				only used in unusual circumstances by the most sophisticated programmers. The execute method should be used only when its possible that the statement may return one or more than one ResultSet object or update counts or both of their combinations
				
	ResultSet	
		Java.Sql.ResultSet interface represents the result set of a database query
		A ResultSet object maintains a cursor that points to the row in the ResultSet which helps navigating from one row to the other.
		When the ResultSet is first returned, the starting cursor position is before the first row of data(Its not pointing to any data at first, we have to move the cursor)
		
		Methods
			Navigational Methods(cursor movements)
				beforeFirst()
				afterLast()
				first()
				last()
				previous()
				next()
				getRow()
				
			Get Methods
				get method for each data type
				Each get method has two versions
					One that takes in a column name
					One that takes in a column index value
				
			Update Methods
				allows modification to data in a table through the ResultSet
				Each update method has two versions
					One that takes in a column name
					One that takes in a column index value
					
					public void updateString(int columnIndex,String s)
					public void updateString(String columnName,String s)
					
					rs.updateString("First_Name","Shekhar");
						Changes the column of the current row in the ResultSet object,but not in the underlying database
						To update the changes in the database we need to invoke one of the following methods:
							updateRow()
							deleteRow()
							refreshRow()
							cancelRowUpdate()
							insertRow()
						
		
		
	
		ResultSet Types
			Type_Forward_Only(default ResultSet type)
				The cursor will always move forward only direction
			Type_Scroll_Insensitive
				The cursor will move forward and backward and the ResultSet is not sensitive to changes made by others to the database that occur after the result was created
			Type_Scroll_Sensitive	
				The cursor will move forward and backward and the ResultSet is sensitive to changes made by others to the database that occur after the result was created
			
		ResultSet Concurrency Types
			Concur_Read_Only(default)
			Concur_Updatable
				
	
	
		With MySql the default ResultSet object is scrollable, which means that you can move the cursor up and down, going anywhere you like
		but with any databases along with Oracle the default is forward only, meaning the cursor will start before the data and you will be able to move forward to the end but you wont be able to move back again 
	
Steps for Development Process
	Establish Connection to a database
	Create Statement Object
	Execute SQL query
	Process the ResultSet
	
	Understanding PreparedStatement
		A PreparedStatement interface is a sub interface of Statement
		
		PreparedStatement pstmt = myConn.createStatement("select * from employees where salary < ? and department_id = ?");
		
		To Bind: setXxx() method where Xxx represents the java datatypes of the value
		
		ForExample: setInt(P1,P2)
					setString(P1,P2)		//P1: Position(1 Based) P2: Value
					setDouble(P1,P2)
		
		To Set:
			pstmt.setDouble(1,10000);
			pstmt.setInt(2,50);	
			
		Steps for working with PreparedStatement
			1. Establish a Connection with a Database
			2. Prepare the Statement using Parameter placeholder(?)
			3. Set the values for Parameters otherwise SQLException will be thrown
			4. Execute the Statement		
		
	
				Understanding CallableStatements
	
A Stored Procedure is a group of SQL Statements that perform a particular task
	Stored Procedures created by DBA
	Every Database has its own language for creating Stored Procedures
	
	MySQL uses Stored Procedure Language
	ORACLE uses PL/SQL(Procedural language extensions to the Structured Query Language)
	Microsoft SQL Server uses Transact SQL or TSQL
	
	CallableStatements are used to make a call to the Stored Procedures
	
	CallableStatement cstmt = conn.prepareCall(
								"{call StoredProcedureName (  [Parameter Definition]  )}"
								) 
		Types of Parameters
			Input(Default)
			Output
			Input Output	
			
		To Set Parameter Value
			setXxx(Position, Value)	
			
			
	Creating StoredProcedure (IN) in MySQL
		CREATE PROCEDURE `addNewEmployee`(IN id INT, IN name VARCHAR(255), IN email VARCHAR(255))
		BEGIN
		INSERT INTO newemployees(employee_id,employee_name,email)
		VALUE(id,name,email);
		END						
								
			
	Executing a StoredProcedure
		CALL addNewEmployee('15','shahtr','shahrukhtramboo@gmail.com');	
		

	Batch Processing
		addBatch() - Returns void
		executeBatch() - Returns an array of Integer
	
	
	
		
	Creating StoredProcedure (OUT) in MySQL	
		CREATE PROCEDURE `countEmployees`(IN name VARCHAR(255),OUT total INT)
		BEGIN
		select count(employee_name) INTO total FROM newemployees where employee_name = name;
		END									
	
	Executing a StoredProcedure
		CALL countEmployees('shahrukh',@total);
		select @total;
	
	
	
		
	Creating StoredProcedure (INOUT) in MySQL
		CREATE DEFINER=`root`@`localhost` PROCEDURE `addToId`(INOUT idValue INT)
		BEGIN
		DECLARE addextra INT DEFAULT 13;
		select employee_id INTO idValue from newemployees where employee_id = idValue;
		SET idValue = idValue + addextra;
		SELECT idValue;
		END
		
	Executing a StoredProcedure
		SET  @value1=12;
		Call addToId(@value1);
		select @value1;
		
	
	
		
	Creating ResultSets Stored Procedure in MySQL
		CREATE DEFINER=`root`@`localhost` PROCEDURE `callingResultsets`(IN name VARCHAR(255))
		BEGIN
			SELECT * FROM newemployees where employee_name = name;
		END	
		
	Executing a StoredProcedure
		Call callingResultsets('shahrukh');	
		
	
	
	What is CLOB?
		A CLOB(Character Large Object) is a collection of character data stored as a single entity in a database
		CLOBs are typically used to store large text documents (Plain text or XML)
		
		Note: Database support for CLOBs is not Universal
		
		Storing and Retrieving CLOB Data
			MySQL
				Create table newemployees2
				(
					employee_id int(10),
					first_name varchar(60),
					last_name varchar(60),
					Resume LongText
				)
				Longtext can store at a maximum of 4GB of characters
				
			Oracle
				Create table newemployees2
				(
					employee_id number(10),
					first_name varchar(60),
					last_name varchar(60),
					Resume CLOB
				)
				
	What is BLOB?
		A BLOB(Binary Large Object) is a collection of Binary data stored as a single entity in a database
		BLOBs are typically Documents, Images, Audio or other Binary objects
						
		Note: Database support for BLOBs is not Universal
		
		Storing and Retrieving BLOB Data
			MySQL
				Create table newemployees3
				(
					employee_id int(10),
					first_name varchar(60),
					last_name varchar(60),
					Resume LongText,
                    Photo blob
				);
				
				
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
	
	
	
	
	
	